/******************************************************************************

                            Online Java Compiler.
                Code, Compile, Run and Debug java program online.
Write your code in this editor and press "Run" button to execute it.

*******************************************************************************/
import java.lang.Math;

public class Main
{
    public static class Point
    {
        //точка с координатами (x,y)
        private double x; 
        private double y;
        //конструктор по умолчанию
        public Point(double x, double y)
        {
            this.x = x;
            this.y = y;
        }
        
        //Пустой конструктор
        public Point()
        {
            this.x = 0.0;
            this.y = 0.0;
        }
        
        //Вычитание
        public void subtraction(Point p1)
        {
            this.x = this.x - p1.getX();
            this.y = this.y - p1.getY();
        }
        
        //Сложение
        public void addition(Point p1)
        {
            this.x = this.x + p1.getX();
            this.y = this.y + p1.getY();
        }
        
        //Задать координаты
        public void setCoords (double a, double b)
        {
            this.x = a;
            this.y = b;
        }
        
        //Задать координату x
        public void setX (double a)
        {
            this.x = a;
        }
        
        //Задать координату Y
        public void setY (double b)
        {
            this.y = b;
        }

        //Получить компоненту х
        public double getX ()
        {
            return this.x;
        }
        
        //Получить компоненту Y
        public double getY ()
        {
            return this.y;
        }

        //Печать координат
        public void printCoords ()
        {
            System.out.println ("Координата x = " + this.x);
            System.out.println ("Координата y = " + this.y);
        }
    }
    
    public static class Vector2 
    {
        //вектор = ai+bj, где a,b - компоненты (проекции) вектора, a i,j - базис
        private double i; 
        private double j;
        //конструктор по умолчанию
        public Vector2(Point start, Point finish)
        {
            this.i = finish.getX() - start.getX();
            this.j = finish.getY() - start.getY();
        }
        
        //Умножение на число
        public void multiplication(double a)
        {
            this.i = this.i * a;
            this.j = this.j * a;
        }
        
        //Длина вектора
        public double length()
        {
            return Math.sqrt(Math.pow(this.i, 2) +Math.pow(this.j, 2));
        }
        
        //Печать компонент вектора
        public void printVector2 ()
        {
            System.out.println ("Компонента базиса i = " + this.i);
            System.out.println ("Компонента базиса j = " + this.j);
        }
    }
    
    public interface Figure
    {
        public abstract double perimeter();
        public abstract double square();
        public abstract void rotation(double angle);
        public abstract void moving(Point delta);
    }
    
    public static class Triangle implements Figure
    {
        //объявляем точки треугольника
        private Point   p1;
        private Point   p2; 
        private Point   p3; 
        
        //конструктор по умолчанию
        public Triangle(Point p1, Point p2, Point p3)
        {
            this.p1 = p1;
            this.p2 = p2;
            this.p3 = p3;
        }
        
        //Печать координат треугольника
        public void printTriangle()
        {
            p1.printCoords();
            p2.printCoords();
            p3.printCoords();
        }
        
        //Расчет периметра
        public double perimeter()
        {
            double perimeter = 0.0;
            //Объявляем вектора (входные параметры: точка начала, точка конца)
            Vector2 a = new Vector2(this.p1, this.p2);
            Vector2 b = new Vector2(this.p2, this.p3);
            Vector2 c = new Vector2(this.p3, this.p1);
            return perimeter = a.length() + b.length() + c.length();
        }
        
        //Расчет площади
        public double square()
        {
            return 1.0/2.0 * Math.abs((p2.getX() -p1.getX())*(p3.getY()-p1.getY()) - (p3.getX() -p1.getX())*(p2.getY()-p1.getY()));
        }
        
        //Вращение 
        //радианы * Math.PI/180 = градусы
        public void rotation(double angle)
        {
            Triangle t = new Triangle(this.p1, this.p2, this.p3);
            
            //Расчет центра 
            Point centre = t.getCentre();
            
            //Вычитаем из каждой точки точку центра (переносим центр треугольника в начало координат)
            this.p1.subtraction(centre);
            this.p2.subtraction(centre);
            this.p3.subtraction(centre);
            
            //Вращаем треугольник относительно начала координат
            this.p1 = rotationNewPositionOfPoint(angle, this.p1);
            this.p2 = rotationNewPositionOfPoint(angle, this.p2);
            this.p3 = rotationNewPositionOfPoint(angle, this.p3);
            
            //Возвращаем центр треугольника на прежнее место (до вращения)
            this.p1.addition(centre);
            this.p2.addition(centre);
            this.p3.addition(centre);
        }
        
        public Point rotationNewPositionOfPoint(double angle, Point p)
        {
            return new Point(p.getX() * Math.cos(angle) - p.getY() *  Math.sin(angle),p.getX() * Math.sin(angle) + p.getY() *  Math.cos(angle));
        }

        //Перемещение
        public void moving(Point c1)
        {
            Triangle t = new Triangle(this.p1, this.p2, this.p3);
            
            //Расчет разности между старым и новым центром (результат храним в centre)
            c1.subtraction(t.getCentre());
            
            //Добавление разности между центрами (само перемещение)
            this.p1.addition(c1);
            this.p2.addition(c1);
            this.p3.addition(c1);
        }
        
        //Расчет центра фигуры
        public Point getCentre()
        {
            return new Point((p1.getX() + p2.getX() + p3.getX()) / 3.0, (p1.getY() + p2.getY() + p3.getY()) / 3.0);
        }
        
        //Масштабирование
        public void scaling (double coeff)
        {
            Triangle t = new Triangle(this.p1, this.p2, this.p3);
            Point centre = t.getCentre();
            
            //Вычитаем из каждой точки точку центра (переносим центр треугольника в начало координат)
            this.p1.subtraction(centre);
            this.p2.subtraction(centre);
            this.p3.subtraction(centre);
            
            //Умножаем координаты на коэффициент
            this.p1.setCoords(this.p1.getX() * coeff, this.p1.getY() * coeff);
            this.p2.setCoords(this.p2.getX() * coeff, this.p2.getY() * coeff);
            this.p3.setCoords(this.p3.getX() * coeff, this.p3.getY() * coeff);
            
            //Возвращаем центр треугольника на прежнее место (до масштабирования)
            this.p1.addition(centre);
            this.p2.addition(centre);
            this.p3.addition(centre);
        }
    }
    
    public static class Rectangle implements Figure
    {
        //объявляем точки прямоугольника
        private Point   p1;
        private Point   p2; 
        private double  h; 
        
        //конструктор по умолчанию
        public Rectangle(Point p1, Point p2, double h)
        {
            this.p1 = p1;
            this.p2 = p2;
            this.h = h;
        }
        
        //Расчет периметра
        public double perimeter()
        {
            Vector2 a = new Vector2 (this.p1, this.p2);
            return 2.0*(2.0 * h + a.length());
        }
        
        public double square()
        {
            Vector2 a = new Vector2 (this.p1, this.p2);
            return (2.0 * h) * a.length();
        }
        
        public void rotation(double angle)
        {
            //хд
        }
        
        public void moving(Point delta)
        {
            //хд
        }
        
        //расчет центра фигуры
        public Point getCentre()
        {
            double x = (p1.getX() + p2.getX()) / 2.0;
            double y = (p1.getY() + p2.getY()) / 2.0;
            Point a = new Point(x, y);
            return a;
        }
    }

    
    /*public static class Ellipse
    {
        Point   c,  //точка центра фигуры
                f1, //точка фокуса 1     
                f2; //точка фокуса 2
        double  a1, //длина большой оси
                a2; //длина малой оси
        public Ellipse(Point c, Point f1, Point f2, double a1, double a2)
        {
            this.c = c;
            this.f1 = f1;
            this.f2 = f2;
            this.a1 = a1;
            this.a2 = a2;
        }
    }
    */
  

    public static void main (String[]args)
    {
        
        Point a = new Point(1, 2);
        Point b = new Point(5, 9);
        Point c = new Point(1, 7);

        Vector2 v = new Vector2(a, b);
        
        /*System.out.println("Вектор"); 
        v.print_vector2();
        v.multiplication(1.5);
        v.print_vector2();*/
        Triangle t = new Triangle(a, b, c);
        System.out.println("Периметр треугольника равен = " + t.perimeter());
        System.out.println("Площадь треугольника равна = " + t.square());
        Point centre = t.getCentre();
    
        
        System.out.println("Треугольник");
        
        
        t.scaling(2.0);
        
        Point centre1 = t.getCentre();
        centre1.printCoords();
        System.out.println("Периметр треугольника равен = " + t.perimeter());
        System.out.println("Площадь треугольника равна = " + t.square());
        /*double h = 2.0;
        Rectangle r = new Rectangle(a, b, h);
        System.out.println("Периметр треугольника равен = " + r.perimeter());
        System.out.println("Площадь треугольника равна = " + r.square());*/
    }
}
