/******************************************************************************

                            Online Java Compiler.
                Code, Compile, Run and Debug java program online.
Write your code in this editor and press "Run" button to execute it.

*******************************************************************************/
import java.lang.Math;
import java.util.ArrayList;

public class Main
{
    public static class Point
    {
        //точка с координатами (x,y)
        private double x; 
        private double y;
        //конструктор по умолчанию
        public Point(double x, double y)
        {
            this.x = x;
            this.y = y;
        }
        
        //Пустой конструктор
        public Point()
        {
            this.x = 0.0;
            this.y = 0.0;
        }
        
        //Вычитание
        public void subtraction(Point p1)
        {
            this.x = this.x - p1.getX();
            this.y = this.y - p1.getY();
        }
        
        //Сложение
        public void addition(Point p1)
        {
            this.x = this.x + p1.getX();
            this.y = this.y + p1.getY();
        }
        
        //Построение вектора из точки со знаком минус
        public Point pointMinusVector(Vector2 v)
        {
            return new Point(this.x - v.getI(), this.y - v.getJ());
        }
        
        //Построение вектора из точки со знаком плюс
        public Point pointPlusVector(Vector2 v)
        {
            return new Point(this.x + v.getI(), this.y + v.getJ());
        }
        
        
        //Задать координаты
        public void setCoords (double a, double b)
        {
            this.x = a;
            this.y = b;
        }
        
        //Задать координату x
        public void setX (double a)
        {
            this.x = a;
        }
        
        //Задать координату Y
        public void setY (double b)
        {
            this.y = b;
        }

        //Получить компоненту х
        public double getX ()
        {
            return this.x;
        }
        
        //Получить компоненту Y
        public double getY ()
        {
            return this.y;
        }

        //Печать координат
        public void printCoords ()
        {
            System.out.println ("Координата x = " + this.x);
            System.out.println ("Координата y = " + this.y);
        }
        
        public Point rotationNewPositionOfPoint(double angle)
        {
            return new Point(this.x * Math.cos(angle) - this.y *  Math.sin(angle), this.x * Math.sin(angle) + this.y *  Math.cos(angle));
        }
    }
    
    public static class Vector2 
    {
        //вектор = ai+bj, где a,b - компоненты (проекции) вектора, a i,j - базис
        private double i; 
        private double j;
        //конструктор по умолчанию (принимает точки)
        public Vector2(Point start, Point finish)
        {
            this.i = finish.getX() - start.getX();
            this.j = finish.getY() - start.getY();
        }
        
        //конструктор (принимает компоненты i и j)
        public Vector2(double i, double j)
        {
            this.i = i;
            this.j = j;
        }
        
        //Получить компоненту i
        public double getI()
        {
            return this.i;
        }
        
        //Получить компоненту j
        public double getJ()
        {
            return this.j;
        }
        
        //Умножение на число
        public void multiplication(double a)
        {
            this.i = this.i * a;
            this.j = this.j * a;
        }
        
        //Длина вектора
        public double length()
        {
            return Math.sqrt(Math.pow(this.i, 2) +Math.pow(this.j, 2));
        }
        
        //Печать компонент вектора
        public void printVector2 ()
        {
            System.out.println ("Компонента базиса i = " + this.i);
            System.out.println ("Компонента базиса j = " + this.j);
        }
        
        //Нормальный вектор
        public Vector2 normal(Vector2 a)
        {
            double len = a.length();
            double i1 = this.j/len;
            double j1 = -this.i/len;
            return new Vector2(i1, j1);
        }
    }
    
    public interface Figure
    {
        public abstract double perimeter();
        public abstract double square();
        public abstract void rotation(double angle);
        public abstract void moving(Point newCentre);
        public abstract void scaling (double coeff);
        public abstract Point getCentre();
    }
    
    public static class Triangle implements Figure
    {
        //объявляем точки треугольника
        private Point   p1;
        private Point   p2; 
        private Point   p3; 
        
        //конструктор по умолчанию
        public Triangle(Point p1, Point p2, Point p3)
        {
            this.p1 = p1;
            this.p2 = p2;
            this.p3 = p3;
        }
        
        //Печать координат треугольника
        public void printTriangle()
        {
            p1.printCoords();
            p2.printCoords();
            p3.printCoords();
        }
        
        //Расчет периметра
        public double perimeter()
        {
            //Объявляем вектора (входные параметры: точка начала, точка конца)
            Vector2 a = new Vector2(this.p1, this.p2);
            Vector2 b = new Vector2(this.p2, this.p3);
            Vector2 c = new Vector2(this.p3, this.p1);
            return a.length() + b.length() + c.length();
        }
        
        //Расчет площади
        public double square()
        {
            return 1.0/2.0 * Math.abs((p2.getX() -p1.getX())*(p3.getY()-p1.getY()) - (p3.getX() -p1.getX())*(p2.getY()-p1.getY()));
        }
        
        //Вращение 
        //радианы * Math.PI/180 = градусы
        public void rotation(double angle)
        {
            Triangle t = new Triangle(this.p1, this.p2, this.p3);
            
            //Расчет центра 
            Point centre = t.getCentre();
            
            //Вычитаем из каждой точки точку центра (переносим центр треугольника в начало координат)
            this.p1.subtraction(centre);
            this.p2.subtraction(centre);
            this.p3.subtraction(centre);
            
            //Вращаем треугольник относительно начала координат
            this.p1.rotationNewPositionOfPoint(angle);
            this.p2.rotationNewPositionOfPoint(angle);
            this.p3.rotationNewPositionOfPoint(angle);
            
            //Возвращаем центр треугольника на прежнее место (до вращения)
            this.p1.addition(centre);
            this.p2.addition(centre);
            this.p3.addition(centre);
        }
        
        //Перемещение
        public void moving(Point newCentre)
        {
            Triangle t = new Triangle(this.p1, this.p2, this.p3);
            
            //Расчет разности между старым и новым центром (результат храним в newCentre)
            newCentre.subtraction(t.getCentre());
            
            //Добавление разности между центрами (само перемещение)
            this.p1.addition(newCentre);
            this.p2.addition(newCentre);
            this.p3.addition(newCentre);
        }
        
        //Масштабирование
        public void scaling (double coeff)
        {
            Triangle t = new Triangle(this.p1, this.p2, this.p3);
            Point centre = t.getCentre();
            
            //Вычитаем из каждой точки точку центра (переносим центр треугольника в начало координат)
            this.p1.subtraction(centre);
            this.p2.subtraction(centre);
            this.p3.subtraction(centre);
            
            //Умножаем координаты на коэффициент
            this.p1.setCoords(this.p1.getX() * coeff, this.p1.getY() * coeff);
            this.p2.setCoords(this.p2.getX() * coeff, this.p2.getY() * coeff);
            this.p3.setCoords(this.p3.getX() * coeff, this.p3.getY() * coeff);
            
            //Возвращаем центр треугольника на прежнее место (до масштабирования)
            this.p1.addition(centre);
            this.p2.addition(centre);
            this.p3.addition(centre);
        }
        
        //Расчет центра фигуры
        public Point getCentre()
        {
            return new Point((p1.getX() + p2.getX() + p3.getX()) / 3.0, (p1.getY() + p2.getY() + p3.getY()) / 3.0);
        }
        
        //Получение 3 точек
        public ArrayList<Point> get3Points ()
        {
            //Объявляем список точек рамером 3 [0...2]
            ArrayList<Point> list = new ArrayList<>(2);
            
            //Суем вершины в список
            list.add(this.p1);
            list.add(this.p2);
            list.add(this.p3);
            
            return list;
        }

        //Описанная окружность
    public Circle getOuterCircle()
    {
        double x_12 = this.p1.getX() - this.p2.getX();
        double y_12 = this.p1.getY() - this.p2.getY();
        double x_23 = this.p2.getX() - this.p3.getX();
        double y_23 = this.p2.getY() - this.p3.getY();;
        double x_31 = this.p3.getX() - this.p1.getX();
        double y_31 = this.p3.getY() - this.p1.getY();
        double z_1 = Math.pow(this.p1.getX(), 2) + Math.pow(this.p1.getY(), 2);
        double z_2 = Math.pow(this.p2.getX(), 2) + Math.pow(this.p2.getY(), 2);
        double z_3 = Math.pow(this.p3.getX(), 2) + Math.pow(this.p3.getY(), 2);
        double z_x = y_12*z_3 + y_23*z_1 + y_31*z_2;
        double z_y = x_12*z_3 + x_23*z_1 + x_31*z_2;
        double z = x_12*y_31 - y_12*x_31;
        Point centre  = new Point(-z_x/(2.0 * z), z_y/(2.0 * z));
        Vector2 r = new Vector2(centre, this.p1);
        return new Circle(centre, r.length());
    }

    //Вписанная окружность
    public Circle getInnerCircle()
    {
        Triangle t = new Triangle(this.p1, this.p2, this.p3);
        double r = t.square()/(t.perimeter()/2.0);
        Vector2 a = new Vector2(p2, p3);
        Vector2 b = new Vector2(p3, p1);
        Vector2 c = new Vector2(p1, p2);
        double x = (a.length()*p1.getX() + b.length()*p2.getX()+c.length()*p3.getX())/(a.length()+b.length()+c.length());
        double y = (a.length()*p1.getY() + b.length()*p2.getY()+c.length()*p3.getY())/(a.length()+b.length()+c.length());
        Point centre  = new Point(x,y);
        return new Circle(centre, r);
    }
    }
    
    public static class Rectangle implements Figure
    {
        private Point   p1; //Первая точка прямоугольника
        private Point   p2; //Вторая точка прямоугольника
        private double  h;  //Половина высоты прямоугольника
        
        //конструктор по умолчанию
        public Rectangle(Point p1, Point p2, double h)
        {
            this.p1 = p1;
            this.p2 = p2;
            this.h = h;
        }
        
        //Печать компонент прямоугольника
        public void printRectangle()
        {
            p1.printCoords();
            p2.printCoords();
            System.out.println("Половина высоты= " + h);
        }
        
        //Расчет периметра
        public double perimeter()
        {
            Vector2 a = new Vector2 (this.p1, this.p2);
            return 2.0*(2.0 * h + a.length());
        }
        
        //Расчет площади
        public double square()
        {
            Vector2 a = new Vector2 (this.p1, this.p2);
            return (2.0 * h) * a.length();
        }
        
        //Вращение
        public void rotation(double angle)
        {
            Rectangle r = new Rectangle(this.p1, this.p2, this.h);
            
            //Расчет центра 
            Point centre = r.getCentre();
            
            //Вычитаем из каждой точки точку центра (переносим центр прямоугольника в начало координат)
            this.p1.subtraction(centre);
            this.p2.subtraction(centre);
            
            //Вращаем прямоугольник относительно начала координат
            this.p1.rotationNewPositionOfPoint(angle);
            this.p2.rotationNewPositionOfPoint(angle);
            
            //Возвращаем центр прямоугольника на прежнее место (до вращения)
            this.p1.addition(centre);
            this.p2.addition(centre);
        }
        
        //Перемещение
        public void moving(Point newCentre)
        {
            Rectangle r = new Rectangle(this.p1, this.p2, this.h);
            
            //Расчет разности между старым и новым центром (результат храним в newCentre)
            newCentre.subtraction(r.getCentre());
            
            //Добавление разности между центрами (само перемещение)
            this.p1.addition(newCentre);
            this.p2.addition(newCentre);
        }
        
        //Расчет центра фигуры
        public Point getCentre()
        {
            double x = (p1.getX() + p2.getX()) / 2.0;
            double y = (p1.getY() + p2.getY()) / 2.0;
            return new Point(x, y);
        }
         
        //Масштабирование
        public void scaling (double coeff)
        {
            Rectangle r = new Rectangle(this.p1, this.p2, this.h);
            Point centre = r.getCentre();
            
            //Вычитаем из каждой точки точку центра (переносим центр треугольника в начало координат)
            this.p1.subtraction(centre);
            this.p2.subtraction(centre);
            
            //Умножаем координаты на коэффициент
            this.p1.setCoords(this.p1.getX() * coeff, this.p1.getY() * coeff);
            this.p2.setCoords(this.p2.getX() * coeff, this.p2.getY() * coeff);
            this.h = h * coeff;
            
            //Возвращаем центр треугольника на прежнее место (до масштабирования)
            this.p1.addition(centre);
            this.p2.addition(centre);
        }
        
        //Получение 4 точек
        public ArrayList<Point> get4Points ()
        {
            //Расчет обычного вектора 
            Vector2 a = new Vector2 (this.p1, this.p2);
            
            a=a.normal(a);
            a.multiplication(this.h);
            //Объявляем список точек рамером 4 [0...3]
            ArrayList<Point> list = new ArrayList<>(3);
            
            //Делаем обход по вершинам
            list.add(this.p1.pointPlusVector(a));
            list.add(this.p1.pointMinusVector(a));
            list.add(this.p2.pointPlusVector(a));
            list.add(this.p2.pointMinusVector(a));
            
            return list;
        }
        
        //Получение диагонали
        public double getDiagonal ()
        {
            Rectangle r = new Rectangle(this.p1, this.p2, this.h);
            //Получаем 4 точки прямоугольника
            ArrayList<Point> list = r.get4Points();
            //Берем из них де противоположные, считаем вектор
            Vector2 a = new Vector2 (list.get(0), list.get(3));
            return a.length();
        }
        
        //Получение высоты
        public double getHeight ()
        {
            return h * 2.0;
        }
        
        //ПРолучение ширины
        public double getWidth ()
        {
            Vector2 a = new Vector2 (this.p1, this.p2);
            return a.length();
        }
    }

    
    public static class Ellipse implements Figure
    {
        Point   f1; //точка фокуса 1     
        Point   f2; //точка фокуса 2
        double  r;  //перифокусное расстояние (минимальное расстояние от фокуса до точки на эллипсе)
        public Ellipse(Point f1, Point f2, double r)
        {
            this.f1 = f1;
            this.f2 = f2;
            this.r = r;
        }
        
        public abstract double circumference()
        {
            return 2.0 * Math.PI * Math.sqrt((Math.pow(this.a1/2, 2) + Math.pow(this.a2/2, 2))/2);
        }
        
        public abstract double square()
        {
            return 2.0 * Math.PI * Math.sqrt((Math.pow(this.a1, 2) + Math.pow(this.a2, 2))/8);
        }

        //Вращение
        public void rotation(double angle)
        {
            Ellipse e = new Ellipse(this.f1, this.f2, this.r);
            
            //Расчет центра 
            Point centre = e.getCentre();
            
            //Вычитаем из каждой точки точку центра (переносим центр прямоугольника в начало координат)
            this.f1.subtraction(centre);
            this.f2.subtraction(centre);
            
            //Вращаем прямоугольник относительно начала координат
            this.f1.rotationNewPositionOfPoint(angle);
            this.f2.rotationNewPositionOfPoint(angle);
            
            //Возвращаем центр прямоугольника на прежнее место (до вращения)
            this.f1.addition(centre);
            this.f2.addition(centre);
        }
        
        //Перемещение
        public void moving(Point newCentre)
        {
            Ellipse e = new Ellipse(this.f1, this.f2, this.r);
            
            //Расчет разности между старым и новым центром (результат храним в newCentre)
            newCentre.subtraction(e.getCentre());
            
            //Добавление разности между центрами (само перемещение)
            this.f1.addition(newCentre);
            this.f2.addition(newCentre);
        }
        
        //Расчет центра фигуры
        public Point getCentre()
        {
            double x = (f1.getX() + f2.getX()) / 2.0;
            double y = (f1.getY() + f2.getY()) / 2.0;
            return new Point(x, y);
        }
         
        //Масштабирование
        public void scaling (double coeff)
        {
            Ellipse e = new Ellipse(this.f1, this.f2, this.r);
            Point centre = e.getCentre();
            
            //Вычитаем из каждой точки точку центра (переносим центр треугольника в начало координат)
            this.f1.subtraction(centre);
            this.f2.subtraction(centre);
            
            //Умножаем координаты на коэффициент
            this.f1.setCoords(this.f1.getX() * coeff, this.f1.getY() * coeff);
            this.f2.setCoords(this.f2.getX() * coeff, this.f2.getY() * coeff);
            this.r = r * coeff;
            
            //Возвращаем центр треугольника на прежнее место (до масштабирования)
            this.f1.addition(centre);
            this.f2.addition(centre);
        }
        //расстояние от фокуса до центра
        public double distanceFromFocusToCenter()
        {
            Ellipse e = new Ellipse(this.f1, this.f2, this.r);
            Point centre = e.getCentre();
            Vector2 v = new Vector2(this.f1, centre);
            return v.length();
        }
        
        //Получение обоих фокусов в виде списка
        public ArrayList<Point> getFocusPoints ()
        {
            //Объявляем список точек рамером 2 [0...1]
            ArrayList<Point> list = new ArrayList<>(1);
            
            //Добавляем фокусы
            list.add(this.f1);
            list.add(this.f2);
            
            return list;
        }
        //Длина большей полуоси
        public double getTheBigAxleShaft()
        {
            Ellipse e = new Ellipse(this.f1, this.f2, this.r);
            Point centre = e.getCentre();
            Vector2 v = new Vector2(this.f1, centre);
            return this.r + v.length();
        }
    }
    
   public class Circle {
    Point  c;  //Точка центра фигуры
    double r;   //Радиус окружности
    public Circle(Point c, double r)
    {
        this.c = c;
        this.r = r;
    }

    //Получение радиуса
    public double getRadius ()
    {
        return this.r;
    }

    //Масштабирование
    public void scaling (double coeff)
    {
        this.r = this.r * coeff;
    }

    //Перемещение
    public void moving(Point newCentre)
    {
        this.c = newCentre;
    }

    //Расчет длины окружности
    public double circumference()
    {
        return 2.0*Math.PI*r;
    }

    //Расчет площади
    public double square()
    {
        return Math.PI*Math.pow(r,2);
    }

    //Печать окружности
    public void printCircle()
    {
        c.printCoords();
        System.out.println("Радиус= " + r);
    }
}
  

    public static void main (String[]args)
    {
        
        Point a = new Point(-2, 2);
        Point b = new Point(4, 2);
        Point c = new Point(1, 7);

        Vector2 v = new Vector2(a, b);
        
        /*System.out.println("Вектор"); 
        v.printVector2();
        v.multiplication(1.5);
        v.printVector2();
        
        System.out.println("Треугольник");
        Triangle t = new Triangle(a, b, c);
        System.out.println("Периметр треугольника равен = " + t.perimeter());
        System.out.println("Площадь треугольника равна = " + t.square());
        Point centre = t.getCentre();
        t.scaling(2.0);
        
        Point centre1 = t.getCentre();
        centre1.printCoords();
        System.out.println("Периметр треугольника равен = " + t.perimeter());
        System.out.println("Площадь треугольника равна = " + t.square());*/
        System.out.println("Прямоугольник");
        double h = 2.0;
        Rectangle r = new Rectangle(a, b, h);
        System.out.println("Периметр прямоугольника равен = " + r.perimeter());
        System.out.println("Площадь прямоугольника равна = " + r.square());

        ArrayList<Point> list = r.get4Points();
        
        for (Point p : list)
        {
            p.printCoords();
        }
        System.out.println("Высота = " + r.getHeight ());
        System.out.println("Ширина = " + r.getWidth ());
        System.out.println("Диагональ = " + r.getDiagonal ());
    }
}
